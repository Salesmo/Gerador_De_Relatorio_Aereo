import google.generativeai as geneai

print("Configurando API do Gemini...")
GOOGLE_GEMINI_API_KEY = "AIzaSyB2G_ZKM1cefh4o7YO0vvx0WRxStgxhKHw"
geneai.configure(api_key=GOOGLE_GEMINI_API_KEY)
model = geneai.GenerativeModel("gemini-2.0-flash-lite")
chat = model.start_chat(history=[])
print("API do Gemini configurado com sucesso!")


def get_report(json_texto, emit=None):
    prompt = f"""
    Voc√™ √© um especialista em relat√≥rios. Vasculhe toda a internet procurando os melhores modelos para relat√≥rio,
    ent√£o estude-o e aprenda-o.
    Agora, analise o JSON que enviarei abaixo e crie um relat√≥rio sobre ele, contendo o seguinte formato:
    T√≠tulo: [Nome do aeroporto]
    logo abaixo do t√≠tulo: Relat√≥rio de Pousos ‚Äì [Data]
    1: Resumo Geral do Dia -> Fa√ßa aqui um resumo geral de tudo que foi analisado. Esse t√≥pico √© para quem
    n√£o tem tempo de ler o relat√≥rio completo. Aqui deve estar a principal informa√ß√£o de cada t√≥pico, bem direto.
    2: Introdu√ß√£o -> Fa√ßa uma introdu√ß√£o sobre o que o relat√≥rio abordar√° (De acordo com os dados do JSON)
    3: Companhias A√©reas e Frequ√™ncias -> Apresente n√∫meros
    4: Cidades de Origem Mais Comuns -> Destaque o aeroporto e apresente n√∫meros
    5: An√°lise de Pontualidade -> Crie uma tabela se precisar
    6: Modelos de Aeronaves Mais Frequentes -> Apresente n√∫meros
    7: Irregularidades (Cancelados, Desconhecidos)
    8: Conclus√£o -> Fa√ßa uma conclus√£o, seguida de um coment√°rio e uma recomenda√ß√£o que possa ser feito 
    com essa conclus√£o obtida.

    *Importante: Estruture tudo em um HTML, pois toda sua resposta ser√° aplicada diretamente em uma p√°gina HTML
    para o usu√°rio final, portanto, remova qualquer formata√ß√£o de texto (asteriscos, etc) e formate sua mensagem
    em um HTML.

    Regras:
    Titulos do relat√≥rio devem ser em H2 (somente H2, nao extenda), com a classe "titulo-relatorio";
    Textos de cada titulo devem ser um par√°grafo p (somente p, nao extenda), com a classe "paragrafo-relatorio"
    Qualquer destaque que queira adicionar no relat√≥rio, siga as seguintes instru√ß√µes:
    cor -> classe "cor-relatorio_[cor]", sendo as UNICAS cores disponiveis: vermelho, verde, amarelo
    negrito -> classe "negrito-relatorio"
    italico -> classe "italico-relatorio".

    Por fim, lembre-se de traduzir Unknown, Landed, ou qualquer outra palavra em ingl√™s, para portugu√™s. 
    N√£o se esque√ßa de SEMPRE adicionar as classes nos t√≠tulos citados acima e de usar as marca√ß√µes de cor,
    negrito, etc (Use-as, por√©m sem exagerar).

    JSON:
    {json_texto}
    """
    emit('message', {
            'type': 'alert',
            'text': f'Gerando relat√≥rio...'
        })
    resposta = model.generate_content(prompt)
    emit('message', {
            'type': 'alert',
            'text': f'Relat√≥rio gerado com sucesso!'
        })
    
    texto = resposta.text.strip()

    # üîç Remover blocos de markdown tipo ```html ... ```
    if texto.startswith("```html"):
        texto = texto.replace("```html", "").strip()
    if texto.endswith("```"):
        texto = texto[:texto.rfind("```")].strip()

    return texto
